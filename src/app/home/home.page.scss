ion-header {
  background: transparent;
  ion-item {
    --background: transparent;
    ion-avatar {
      background: white;
    }
  }
}
//Changement de couleur du side menu
ion-menu {
  --ion-background-color:rgba(0, 0, 0, 0.75); ;

  ion-toolbar {
      --background: transparent;
  }

  .card {
            transition: all 0.2s ease;
            cursor: pointer;
        }

        .card:hover {
            box-shadow: 5px 6px 6px 2px #e9ecef;
            transform: scale(1.1);
        }
}
  ion-list {
      background: transparent;
  }
  ion-item {
      color: rgb(255, 255, 255);
      --background: transparent;
  }
  ion-content {
      --background: transparent;
  }

ion-content {
  * {
    font-family: lato;
  }

  .main-header {
    height: 55vh;
    width: 155%;
    // background-image: url("/assets/image/pexels.jpg");
    background: linear-gradient(90deg, var(--ion-color-dark-tint) 100%, var(--ion-color-success-shade) 35%);
    box-shadow: 0 1px 10px var(--ion-color-light);
    // border-radius: 0 0 50% 50%;
    margin-left: -14vh;
    margin-top: -10px;
   
  }
  ion-grid {
    width: 100%;
    position: absolute;
    top: 0;
    left: 0;
    transform: translateY(10vh);
    padding-bottom: 8vh;
    ion-row {
      ion-col {
        ion-label {
          ion-note {
            font-size: 0.7rem;
          }
          ion-chip {
            ion-label {
              font-size: 1.4rem;
              font-weight: bold;
              letter-spacing: 0.5px;
              text-shadow: 1px 1px 1px var(--ion-color-medium);
            }
          }
          b {
            font-size: 1.2rem;
          }
        }
        ion-button {
          height: 3em !important;
          transform: translateY(10%);
          text-transform: none;
          background-color:rgba(67, 185, 12, 0.418);
          ion-text {
            font-size: 0.7rem;
            font-weight: bold;
            text-shadow: 1px 1px 1px var(--ion-color-medium);
          }
          ion-icon {
            font-size: 1rem;
          }
        }
        hr{
        }
        // ion-card-header {
        //   display: flex;
        //   flex-flow: column-reverse;
        // }
        ion-card {
          box-shadow: -1px 11px 13px -6px rgb(87, 86, 86);
          border-radius: 10px !important;
          margin: 10px 0;
          ion-thumbnail {
            width: 30vh;
            height: 30vh;
            border-radius: 20px;
            img {
              width: 55vh;
              height: 55vh;
              transform: translateY(50%);
              margin-top: -253px;
            }
          }
          ion-card-content {
            ion-label {
              font-weight: bold;
              text-shadow: 1px 1px 1px var(--ion-color-medium);
              letter-spacing: 0.5px;
            }
          }
        }
      }
    }
    ion-list {
      background: transparent;
      ion-item {
        width: 95%;
        margin: auto;
        border-radius: 5px;
        margin-bottom: 2vh;
        p {
          font-size: 0.65rem;
        }
        ion-text {
          font-weight: 800;
        }
      }
    }
  }
}

.ij {
  background-color: #135d54;
  border: solid 1px #fff;
  color: #fff;
  text-align: center;
}










$grid-breakpoints: (
 xs: 0, // Phone (0px - 575px)
 sm: 576px, // Phablet (576px - 767px)
 md: 768px, // Tablet vertical (768px - 991px)
 lg: 992px // Tablet horizontal, Desktop (992px and above)
);
$grid-max-widths: (
 lg: 992px
);
// IF the browser does NOT support the  CSS Grid Layout specification
// We rely on the use of the CSS Flexbox standard instead
.wrapper {
  display: flex;
  flex-wrap: wrap;
}


// IF the browser DOES support the CSS Grid Layout specification
// then the following rules are applied instead
.wrapper {
  display: grid;

  // Define a 10 pixel gap between each grid track
  grid-gap: 10px;

  // Define a rule, that will be repeated for each grid column, where
  // the grid track is set to a minimum width of 300 pixels and a maximum 
  // width of the available space within the grid container (via the fr or 
  // fraction unit)

  // The auto-fill value allows as many grid tracks to be fitted into the
  // width of the grid container as possible
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));

  // Specify the height of the row - minimum value of 50 pixels and a maximum
  // value set to auto
  grid-auto-rows: minmax(150px, auto);

}


// Define the header/footer tag values
header,
footer {
  padding: 3em;
  margin-left: 5px;
  margin-right: 5px;
  // Add a flex rule for browsers not supporting the
  // CSS Grid Layout spec
  flex: 0 1 100%;
  // Define the start and end values for the grid column
  grid-column: 1 / -1;
  text-align: center;
  background-color: rgba(175, 186, 202, 1);
}


// Define the style rules for each panel within the grid
// container
.box {
  border-radius: 5px;
  padding: 3em;
  margin-left: 5px;
  margin-right: 5px;
  // Add a flex rule for browsers not supporting the
  // CSS Grid Layout spec
  flex: 1 1 300px;
// .imgRegion{
  
// }
.welcome-card ion-img {
  max-height: 45vh;
  overflow: hidden;
}
  h2 {
     font-weight: bold;
 }
}





// Add the necessary classes for styling the 
// background colours of each panel in the 
// project UI
.red {
   background-color: rgba(220, 83, 81, 1);
   box-shadow: inset;
}
.red1{
  background-color:rgba(0, 0, 0, 0.45);
  box-shadow: inset;
  height: 79vh;
  width: 155%;
  

  // border-radius: 0 0 50% 50%;
  margin-left: -14vh;
  margin-top: -16px;
}
.welcome-card1{
  height: 65.5vh;
  width: 155%;
  background-color:rgba(0, 0, 0, 0.45);
}
hr.new1 {
  border-top: 1px solid rgb(255, 255, 255);
}
.green {
   background-color: rgba(187, 225, 123, 1);
}

.blue {
   background-color: rgba(131, 150, 225, 1);
}

.purple {
   background-color: rgba(155, 121, 170, 1);
}

.yellow {
   background-color: rgba(235, 229, 39, 1);
}

.violet {
   background-color: rgba(213, 118, 211, 1);
}

.orange {
   background-color: rgba(213, 151, 46, 1);
}

.turquoise {
   background-color: rgba(105, 203, 217, 1);
   
}
/* The flip card container - set the width and height to whatever you want. We have added the border property to demonstrate that the flip itself goes out of the box on hover (remove perspective if you don't want the 3D effect */
.flip-card {
  background-color: transparent;
  width: 400px;
  height: 200px;
  margin-bottom: 2%;
  border: 1px solid #f1f1f1;
  perspective: 1000px; /* Remove this if you don't want the 3D effect */
}

/* This container is needed to position the front and back side */
.flip-card-inner {
  position: relative;
  width: 100%;
  height: 100%;
  text-align: center;
  transition: transform 0.8s;
  transform-style: preserve-3d;
}

/* Do an horizontal flip when you move the mouse over the flip box container */
.flip-card:hover .flip-card-inner {
  transform: rotateY(180deg);
}

/* Position the front and back side */
.flip-card-front, .flip-card-back {
  position: absolute;
  width: 100%;
  height: 100%;
  -webkit-backface-visibility: hidden; /* Safari */
  backface-visibility: hidden;
}

/* Style the front side (fallback if image is missing) */
.flip-card-front {
  background-color: #bbb;
  color: black;
}

/* Style the back side */
.flip-card-back {
  background-color: #42B90B;
  color: white;
  transform: rotateY(180deg);
}
